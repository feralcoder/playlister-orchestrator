heat_template_version: 2018-08-31

description: >
  Template to deploy a layer of front-middle-ends with
  a cassandra backend

parameters:
  fe_name:
    type: string
    label: Front-Middle-End Instance Name
    description: Name to be used for all python service instance
    default: playlister_fe
  fe_key_name:
    type: string
    label: Front-Middle-End Key Name
    description: Name of key-pair to be used for all python service instance
    default: cliff_admin
  fe_image_id:
    type: string
    label: Front-Middle-End Image ID
    description: Image to be used for python server instance
    default: "ubuntu-20.4"
  fe_instance_type:
    type: string
    label: Front-Middle-End Instance Type
    description: Type of instance (flavor) to be used for python service nodes
    default: "m1.medium"
  fe_http_ports:
    type: comma_delimited_list
    label: Front-Middle-End HTTP Ports
    description: HTTP Ports for python services to receive
    default: "80,8080"
  fe_https_ports:
    type: comma_delimited_list
    label: Front-Middle-End HTTPS Ports
    description: HTTPS Ports for python services to receive
    default: "443"
  fe_sg_ports:
    type: comma_delimited_list
    label: Front-Middle-End Ports
    description: Ports for python services to receive
    default: "80,443,8080,22"
  fe_subnets:
    type: comma_delimited_list
    label: Front-Middle-End subnets
    default: "admin1-subnet"
  fe_networks:
    type: comma_delimited_list
    label: Front-Middle-End networks
    default: "admin1-net"


  private_network:
    type: string
    description: Network used by the servers
    default: admin1-net
    constraints:
    - custom_constraint: neutron.network
  public_network:
    type: string
    description: Network used by the load balancer
    default: public1
    constraints:
    - custom_constraint: neutron.network
  vip_subnet:
    type: string
    description: Subnet on which the load balancer will be located
    default: public1-subnet
    constraints:
    - custom_constraint: neutron.subnet
  fe_vip:
    type: string
    description: IP of frontend VIP
    constraints:
    default: "172.30.1.11"


resources:
  frontends:
    type: OS::Heat::AutoScalingGroup
    properties:
      resource: frontend
      cooldown: 60
      max_size: 10
      min_size: 3
      desired_capacity: 3
  backends:
    type: OS::Heat::AutoScalingGroup
    properties:
      resource: backend
      cooldown: 60
      max_size: 10
      min_size: 4
      desired_capacity: 4

#  monitor:
#    type: OS::Octavia::HealthMonitor
#    properties:
#      delay: 3
#      type: HTTP
#      timeout: 3
#      max_retries: 3
#      pool: { get_resource: pool }

  fe_80_pool:
    type: OS::Octavia::Pool
    properties:
      lb_algorithm: ROUND_ROBIN
      protocol: HTTP
      listener: { get_resource: fe_80_listener }
  fe_8080_pool:
    type: OS::Octavia::Pool
    properties:
      lb_algorithm: ROUND_ROBIN
      protocol: HTTP
      listener: { get_resource: fe_8080_listener }
  fe_443_pool:
    type: OS::Octavia::Pool
    properties:
      lb_algorithm: ROUND_ROBIN
      protocol: HTTPS
      listener: { get_resource: fe_443_listener }

  fe_80_listener:
    type: OS::Octavia::Listener
    properties:
      loadbalancer: { get_resource: fe_loadbalancer }
      protocol: HTTP
      protocol_port: 80
  fe_8080_listener:
    type: OS::Octavia::Listener
    properties:
      loadbalancer: { get_resource: fe_loadbalancer }
      protocol: HTTP
      protocol_port: 8080
  fe_443_listener:
    type: OS::Octavia::Listener
    properties:
      loadbalancer: { get_resource: fe_loadbalancer }
      protocol: HTTPS
      protocol_port: 443

  fe_loadbalancer:
    type: OS::Octavia::LoadBalancer
    properties:
      vip_subnet: { get_param: vip_subnet }
      vip_address: { get_param: fe_vip }

#  floating_ip:
#    type: OS::Neutron::FloatingIP
#    properties:
#      floating_network: { get_param: public_network }
#      fixed_ip_address: { get_param: fe_vip }

#outputs:
#
#  lburl:
#    value:
#      str_replace:
#        template: http://IP_ADDRESS:PORT
#        params:
#          IP_ADDRESS: { get_attr: [ floating_ip, floating_ip_address ] }
#          PORT: { get_param: lb_port }
#    description: >
#      This URL is the "external" URL that can be used to access the
#      load balancer.


  fe_secgroup:
    type: OS::Neutron::SecurityGroup
    properties:
      name:
        list_join: ['_', [ {get_param: fe_name}, '_secgroup']]
      rules:
        repeat:
          for_each:
            <%port%>: { get_param: fe_sg_ports }
          template:
            protocol: tcp
            port_range_min: <%port%>
            port_range_max: <%port%>
  frontend:
    type: OS::Nova::Server
    properties:
      name: { get_param: fe_name }
      key_name: { get_param: fe_key_name }
      image: { get_param: fe_image_id }
      flavor: { get_param: fe_instance_type }
      security_groups: [default, { get_resource: fe_secgroup }]
      networks:
        repeat:
          for_each:
            <%sub%>: { get_param: fe_subnets }
            <%net%>: { get_param: fe_networks }
          template:
            network: <%net%>
            subnet: <%sub%>
      user_data_format: RAW
#      user_data:
#        str_replace:
#          template: |
#            #! /bin/sh -v
#            Body=$(hostname)
#            Response="HTTP/1.1 200 OK\r\nContent-Length: ${#Body}\r\n\r\n$Body"
#            while true ; do echo -e $Response | nc -l 80; done
  fe_80_member:
    type: OS::Octavia::PoolMember
    properties:
      pool: { get_resource: fe_80_pool }
      address: { get_attr: [ frontend, first_address ] }
      protocol_port: 80
      subnet: { get_param: [ fe_subnets, 0 ] }
  fe_8080_member:
    type: OS::Octavia::PoolMember
    properties:
      pool: { get_resource: fe_8080_pool }
      address: { get_attr: [ frontend, first_address ] }
      protocol_port: 8080
      subnet: { get_param: [ fe_subnets, 0 ] }
  fe_443_member:
    type: OS::Octavia::PoolMember
    properties:
      pool: { get_resource: fe_443_pool }
      address: { get_attr: [ frontend, first_address ] }
      protocol_port: 443
      subnet: { get_param: [ fe_subnets, 0 ] }
